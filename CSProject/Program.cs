using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace CSProject
{
    /// <summary>
    /// My version of the final project from the book
    /// "Learn C# in one day and learn it well" by Jamie Chan (2015)
    /// </summary>
    /// <remarks>
    /// 01.03.2017 First working version
    /// 03.03.2017 Finished adding errorhandling and autogenerated tests. 77% code coverage.
    ///            Added doc comments
    /// </remarks>
    class Program
    {
        /// <summary>
        /// Main program
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {

            #region Initialize local variables

            List<Staff> myStaff = new List<Staff>();
            FileReader fr = new FileReader();
            int month = 0;
            int year = 0;

            #endregion

            #region Get user input for year/month

            while (year == 0)
            {
                Console.Write("Please enter the year: ");
                try
                {
                    year = Convert.ToInt32(Console.ReadLine());
                }
                catch (FormatException)
                {
                    Console.WriteLine("Wrong format.");
                }
            }

            while (month == 0)
            {
                Console.Write("Please enter the month: ");
                try
                {
                    month = Convert.ToInt32(Console.ReadLine());
                    if (month < 1 || month > 12)
                    {
                        Console.WriteLine("Month must be between 1 and 12.");
                        month = 0;
                    }

                }
                catch (FormatException)
                {
                    Console.WriteLine("Wrong format.");

                }
            }

            #endregion

            #region User inputs hours worked for each staff member

            // Reads the file of staff into a list of Staff objects
            myStaff = fr.ReadFile();

            for (int i = 0; i < myStaff.Count; i++)
            {
                try
                {
                    Console.Write("\nEnter hours worked for {0}: ", myStaff[i].NameOfStaff);
                    myStaff[i].HoursWorked = Convert.ToInt32(Console.ReadLine());
                    myStaff[i].CalculatePay();
                    Console.WriteLine(myStaff[i].ToString());

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    // To repeat asking about the same staff members hours:
                    i--;
                }
            }

            #endregion

            #region Write payslips to files

            PaySlip ps = new PaySlip(month,year);
            ps.GeneratePaySlip(myStaff);

            #endregion

            #region Generate summary file

            ps.GenerateSummary(myStaff);

            #endregion

            #region End credits

            Console.WriteLine("Thank you for using PaySoft...");
            Console.Read();

            #endregion

        }
    }

    #region Staff class

    //
    //
    //     Staff class
    //
    //

    /// <summary>
    /// Staff base class
    /// </summary>
    class Staff
    {
        //
        // Fields
        //
        /// <summary>
        /// Hourly pay rate
        /// </summary>
        private float hourlyRate;
        /// <summary>
        /// Hours worked this month
        /// </summary>
        private int hWorked;

        //
        // Properties
        //
        /// <summary>
        /// Total pay, including overtime and any other compensation
        /// </summary>
        public float TotalPay { get; protected set; }
        /// <summary>
        /// Base pay calculated from hours worked and base hourly rate
        /// </summary>
        public float BasicPay { get; private set; }
        /// <summary>
        /// Name of staff member
        /// </summary>
        public string NameOfStaff { get; private set; }
        /// <summary>
        /// Hours worked this month
        /// </summary>
        public int HoursWorked
        {
            get { return hWorked; }
            set
            {
                if (value > 0)
                    hWorked = value;
                else
                    hWorked = 0;
            }
        }

        //
        // Constructor
        //
        /// <summary>
        /// Staff base class constructor
        /// </summary>
        /// <param name="name">Name of staff member</param>
        /// <param name="rate">Hourly pay rate of staff member</param>
        public Staff(string name, float rate)
        {
            if (name!=null)
            {
                NameOfStaff = name;
            } else
            {
                NameOfStaff = "";
            }
            if (rate <0)
            {
                hourlyRate = 0;
            } else
            {
                hourlyRate = rate;
            }
        }

        //
        // Methods
        //
        /// <summary>
        /// Calculate monthly salary
        /// </summary>
        public virtual void CalculatePay()
        {
            Console.WriteLine("Calculating Pay...");
            BasicPay = hWorked * hourlyRate;
            TotalPay = BasicPay;
        }
        /// <summary>
        /// Lists all information about staff member and pay for this month
        /// </summary>
        /// <returns>Name, payrate, hours worked, base pay and total payment</returns>
        public override string ToString()
        {
            return "\nName: " + NameOfStaff +
                "\nHourly Rate: " + hourlyRate +
                "\nHours Worked: " + HoursWorked +
                "\nBasic Pay: " + BasicPay +
                "\nTotal Pay: " + TotalPay + "\n";
        }
    }

    #endregion

    #region Manager class

    //
    //
    //     Manager class
    //
    //
    /// <summary>
    /// Manager class
    /// </summary>
    class Manager : Staff
    {
        //
        // Fields
        //
        /// <summary>
        /// Hourly rate for managers
        /// </summary>
        private const float managerHourlyRate = 50;

        //
        // Properties
        //
        /// <summary>
        /// Holds any allowance the Manager has earned this month.
        /// </summary>
        public int Allowance { get; private set; }

        //
        // Constructor
        //
        /// <summary>
        /// Manager class constructor
        /// Sends name and managers hourly rate to class Staff
        /// </summary>
        /// <param name="name">Name of manager</param>
        public Manager(string name) : base(name, managerHourlyRate)
        {

        }

        //
        // Methods
        //
        /// <summary>
        /// Calculate pay for manager.
        /// Includes a flat rate Allowance if any overtime is worked this month.
        /// </summary>
        public override void CalculatePay()
        {
            base.CalculatePay();

            Allowance = 0;

            if (HoursWorked > 160)
            {
                Allowance = 1000;
                TotalPay = BasicPay + Allowance;
            }
        }

        /// <summary>
        /// Lists name of manager and all information about hours worked and pay
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return "\nName: " + NameOfStaff +
                "\nHourly Rate: " + managerHourlyRate +
                "\nHours Worked: " + HoursWorked +
                "\nBasic Pay: " + BasicPay +
                "\nAllowance: "+ Allowance +
                "\nTotal Pay: " + TotalPay + "\n";
        }
    }

    #endregion

    #region Admin class

    //
    //
    //     Admin class
    //
    //

    /// <summary>
    /// Class for staff members of type 'Admin'
    /// </summary>
    class Admin : Staff
    {
        //
        // Fields
        //
        private const float overtimeRate = 15.5f;
        private const float adminHourlyRate = 30f;

        //
        // Properties
        //
        public float Overtime { get; private set; }

        //
        // Constructor
        //
        /// <summary>
        /// Admin class constructor
        /// </summary>
        /// <remarks>Sets it's own hourly rate for admins</remarks>
        /// <param name="name"></param>
        public Admin(string name) : base(name, adminHourlyRate)
        {

        }

        //
        // Methods
        //
        /// <summary>
        /// Calculates pay for Admins, including overtime pay.
        /// </summary>
        public override void CalculatePay()
        {
            base.CalculatePay();
            if (HoursWorked > 160)
            {
                Overtime = overtimeRate * (HoursWorked - 160);
                TotalPay = BasicPay + Overtime;
            }

        }

        /// <summary>
        /// Lists all parameters for Admin person
        /// </summary>
        /// <returns>String listing name, hours worked and all pay information</returns>
        public override string ToString()
        {
            return "\nName: " + NameOfStaff +
                "\nHourly Rate: " + adminHourlyRate +
                "\nHours Worked: " + HoursWorked +
                "\nBasic Pay: " + BasicPay +
                "\nOvertime: " + Overtime +
                "\nTotal Pay: " + TotalPay + "\n";
        }

    }

    #endregion

    #region Filereader class

    //
    //
    //     FileReader class
    //
    //


        /// <summary>
        /// Class for getting all staff members
        /// </summary>
    class FileReader
    {
        //
        // Methods
        //
        /// <summary>
        /// Reads all staff members from file staff.txt
        /// </summary>
        /// <remarks>
        /// Reads from file staff.txt in same folder as .exe file
        /// Syntax= 'name, position' on each line
        /// Position can be 'Manager' or 'Admin'
        /// </remarks>
        /// <returns>Staff type List with objects that can be of type Admin or Manager, with attribute 'name'</returns>
        public List<Staff> ReadFile()
        {
            List<Staff> myStaff = new List<Staff>();
            string[] result = new string[2];
            string path = "staff.txt";
            string[] separator = { ", " };

            // File syntax:
            // Name, Position

            try
            {
                if (File.Exists(path))
                {

                    try
                    {
                        using (StreamReader sr = new StreamReader(path))
                        {
                            while (sr.EndOfStream != true)
                            {
                                result = sr.ReadLine().Split(separator, StringSplitOptions.RemoveEmptyEntries);
                                if (result[1] == "Manager")
                                {
                                    myStaff.Add(new Manager(result[0]));
                                }
                                else if (result[1] == "Admin")
                                {
                                    myStaff.Add(new Admin(result[0]));
                                }
                            }
                            sr.Close();
                        }

                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                        // throw;
                    }
                }
                else
                {
                    Console.WriteLine("File {0} not found.", path);
                }

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                throw;
            }            return myStaff;

        }

        /// <summary>
        /// FileReader class constructor
        /// </summary>
        public FileReader()
        {

        }
    }
    #endregion

    #region PaySlip class

    //
    //
    //     PaySlip class
    //
    //

    /// <summary>
    /// Class for creating payslip files on disk
    /// </summary>
    /// <remarks>
    /// Files stored inside folder with .exe file. 
    /// filename is (Staffmembers name).txt
    /// Also creates a summary file of people working less than 10 hours.
    /// Filename 'summary.txt'
    /// </remarks>
    class PaySlip
    {

        //
        // Fields
        //
        /// <summary>
        /// Store for month property
        /// </summary>
        private int month;
        /// <summary>
        /// Store for year property
        /// </summary>
        private int year;

        /// <summary>
        /// Enum for months of the year
        /// </summary>
        enum MonthsOfYear
        {
            JAN = 1,
            FEB = 2,
            MAR = 3,
            APR = 4,
            MAY = 5,
            JUN = 6,
            JUL = 7,
            AUG = 8,
            SEP = 9,
            OCT = 10,
            NOV = 11,
            DEC = 12
        }

        //
        // Constructor
        //
        /// <summary>
        /// Constructor for class PaySlip
        /// </summary>
        /// <param name="payMonth"></param>
        /// <param name="payYear"></param>
        public PaySlip(int payMonth, int payYear)
        {
            if (payMonth < 0)
            {
                month = 1;
            } else
            {
                month = payMonth;
            }
            if (payYear < 2000 || payYear > DateTime.Now.Year)
            {
                year = DateTime.Now.Year;
            } else
            {
                year = payYear;
            }
        }

        //
        // Methods
        //
        /// <summary>
        /// Creates a payslip text file for each staff member.
        /// </summary>
        /// <remarks>
        /// File is named after the individual staff member
        /// Ex. John.txt
        /// </remarks>
        /// <param name="myStaff"></param>
        public void GeneratePaySlip(List<Staff> myStaff)
        {
            string path;
            if (myStaff != null)
            {
                foreach (Staff f in myStaff)
                {
                    try
                    {
                        if (f.NameOfStaff != null)
                        {
                            path = f.NameOfStaff + ".txt";
                        }
                        else
                        {
                            break;
                        }

                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                        break;
                        //throw;
                    }
                    if (f.NameOfStaff != null)
                    {
                        path = f.NameOfStaff + ".txt";
                    } else
                    {
                        break;
                    }
                    using (StreamWriter sw = new StreamWriter(path))
                    {
                        sw.WriteLine("PAYSLIP FOR {0} {1}", (MonthsOfYear)month, year);
                        sw.WriteLine("==========================");
                        sw.WriteLine("Name of Staff: {0}", f.NameOfStaff);
                        sw.WriteLine("Hours Worked: {0}", f.HoursWorked);
                        sw.WriteLine("");
                        sw.WriteLine("Basic Pay: {0:C}", f.BasicPay);
                        if (f.GetType() == typeof(Manager))
                        {
                            sw.WriteLine("Allowance: {0:C}", ((Manager)f).Allowance);
                        }
                        else if (f.GetType() == typeof(Admin))
                        {
                            sw.WriteLine("Overtime:  {0:C}", ((Admin)f).Overtime);

                        }
                        sw.WriteLine("");
                        sw.WriteLine("==========================");
                        sw.WriteLine("Total Pay: {0:C}", f.TotalPay);
                        sw.WriteLine("==========================");
                        sw.WriteLine("");
                        sw.WriteLine("Thank you for using PaySoft.");

                        sw.Close();
                    }

                }
            }
        }

        /// <summary>
        /// Creates a summary text file listing people working less than 10 hours/month
        /// </summary>
        /// <remarks>
        /// Name of file: 'summary.txt'. Located with *.exe file
        /// </remarks>
        /// <param name="myStaff"></param>
        public void GenerateSummary(List<Staff> myStaff)
        {
            if (myStaff != null)
            {
                try
                {
                    var result =
                        from staff in myStaff
                        where staff.HoursWorked < 10
                        orderby staff.NameOfStaff ascending
                        select new { staff.NameOfStaff, staff.HoursWorked };
                    string path = "summary.txt";
                    if (result != null)
                    {
                        using (StreamWriter sw = new StreamWriter(path))
                        {
                            sw.WriteLine("Staff with less than 10 working hours");
                            sw.WriteLine("");
                            foreach (var person in result)
                            {
                                sw.WriteLine("Name of Staff: {0}, Hours Worked: {1}", person.NameOfStaff, person.HoursWorked);
                            }

                            sw.Close();
                        }
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    
                    return;
                    // throw;
                }
            }
        }

        /// <summary>
        /// Returns string with month and year for this payslip batch
        /// </summary>
        /// <returns>month + year</returns>
        public override string ToString()
        {
            return "month = " + month + " year = " + year;
        }

    }


    #endregion

}
